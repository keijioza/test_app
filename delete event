
//delete Event popup
import 'dart:async';
import 'dart:convert';
import 'dart:ui';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:path/path.dart' as path;

import 'package:http/http.dart' as http;
import 'package:sqflite/sqflite.dart';
import 'package:sqflite/sqlite_api.dart';

import 'create_account.dart';


class DeleteEvent extends StatefulWidget {
  final name;
  final id;
  final time;
  DeleteEvent({this.name, this.time, this.id});
  
  @override
  _DeleteEventState createState() => _DeleteEventState();

}

class _DeleteEventState extends State<DeleteEvent> {


  bool blockList = true;
  


  var firstName = '';
  var lastName = '';
  checkName() {
    if (widget.name.contains(' ')) {
      setState(() {firstName = widget.name.substring(0, widget.name.indexOf(' '));
      lastName = widget.name.substring(widget.name.indexOf(' '), widget.name.length);
      });
    }
    else {
      setState(() {
        firstName = widget.name;
        lastName = '';
      });
    }
  }
  @override
  void initState() {
    super.initState(); 
    checkName();
    
  }


  

  List languageFamily = [
      'Roboto', 
      'NotoSansSC', 
      'NotoSansBengali', 
      'Roboto',
      'NotoSansArabic', 
      'NotoSansBengali',
      'Roboto',
      'Roboto',
      'Roboto',
      'NotoSansArabic',
      'Roboto',
      'Roboto',
      'NotoSansJP',
      'NotoSansBengali',
      'NotoSansTelugu',
      'Roboto',
      'NotoSansTamil',
      'Roboto',
      'Roboto',
      'SpoqaHanSans',
      'NotoSansArabic'
    ];


  String event = 'Play golf';
  String time = '8:00am';

  
  Future deleteUser({var username}) async {
    final url = Uri.parse('http://54.180.136.44:8080/delete-event-record/' + widget.time.toString());
    final response = await http.delete(url, headers: <String, String> {'Content-Type': 'application/json; charset=UTF-8'},
                                     body: jsonEncode(<String, String> {'time': widget.time.toString()}));
    return response;
    } //use on future builder   ///load username on a text file inside the app
  

  @override
  Widget build(BuildContext context) {
    

    return GestureDetector(onTap: () {
      Navigator.pop(context);
    },
      child: AlertDialog(backgroundColor: Colors.transparent, elevation: 0,
        content: Container(color: Colors.transparent,
          height: MediaQuery.of(context).size.height * .3, width: MediaQuery.of(context).size.width * .8,
          child: Container(child: Column(children: [
            
          Container(height: MediaQuery.of(context).size.height * .3, width: MediaQuery.of(context).size.width * .8, decoration: BoxDecoration(borderRadius: BorderRadius.all(Radius.circular(MediaQuery.of(context).size.height * .02)), color: Colors.white),
          child: 
            

                    Column(children: [
                        Container(height: MediaQuery.of(context).size.height * .1, alignment: Alignment.center,
                          child: GestureDetector(onTap: () async {
                          },
                            child: Text('Delete', textAlign: TextAlign.left, style: TextStyle(decoration: TextDecoration.none, fontFamily: languageFamily[0], color: Colors.black, fontSize: MediaQuery.of(context).size.height * .023, fontWeight: FontWeight.w400, fontStyle: FontStyle.normal, letterSpacing: -0.7,),))),
                        GestureDetector(onTap: () async  {
                          print('deleting....');
                          await deleteUser();
                          Navigator.push(context, PageRouteBuilder(pageBuilder: (context, animation, secondaryAnimation) 
                            => HomeScreen() ,transitionDuration: Duration(milliseconds: 10), transitionsBuilder: (context, animation, secondaryAnimation, child) {
                              var begin = Offset(0, 0.0);
                              var end = Offset(0.0, 0.0);
                              var tween = Tween(begin: begin, end: end);
                              var offsetAnimation = animation.drive(tween);

                              return SlideTransition(
                                position: offsetAnimation,
                                child: child,);
                              }));
                        },
                          child: Container(height: MediaQuery.of(context).size.height * .1,alignment: Alignment.center,
                            child: Text('Yes', textAlign: TextAlign.left, style: TextStyle(decoration: TextDecoration.none, fontFamily: languageFamily[0], color: Colors.black, fontSize: MediaQuery.of(context).size.height * .023, fontWeight: FontWeight.w400, fontStyle: FontStyle.normal, letterSpacing: -0.7,),))),
                        
                        Container(height: MediaQuery.of(context).size.height * .1,alignment: Alignment.center,
                          child: Text('Cancel', textAlign: TextAlign.left, style: TextStyle(decoration: TextDecoration.none, fontFamily: languageFamily[0], color: Colors.black, fontSize: MediaQuery.of(context).size.height * .023, fontWeight: FontWeight.w400, fontStyle: FontStyle.normal, letterSpacing: -0.7,),)),
                        
                      ],)
                    
                   
      ),  
        ])))
    ));}
  }


